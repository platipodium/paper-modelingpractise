Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@incollection{Jackson2009,
abstract = {Analytical models are a fundamental tool in the development of computer-based systems of every kind: their essential purpose is to support human understanding and reasoning in development. To support reasoning, models must be substantially formal. The relationship between a formal model and its-typically-non-formal subject demands care: particular attention must be paid to the model interpretation, which maps its formal terms to the phenomena of the subject. An analytical model is to be regarded not as an assertion, but as a predicate within a larger logical structure of reasoning. Analogical models, such as databases, act as run-time surrogates for some parts of the problem world; in their design the properties of the model itself must be carefully distinguished from those of its subject. Some models may be informal: informal models have many legitimate uses, but cannot serve as a basis for formal reasoning. {\textcopyright} 2009 Springer Berlin Heidelberg.},
author = {Jackson, Michael},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-02463-4_5},
file = {:Users/Lemmen/Downloads/ModelNotes.pdf:pdf},
isbn = {3642024629},
issn = {03029743},
pages = {68--81},
title = {{Some Notes on Models and Modelling}},
url = {http://link.springer.com/10.1007/978-3-642-02463-4{\_}5},
volume = {5600 LNCS},
year = {2009}
}
@article{Date2013,
author = {Date, Publication},
file = {:Users/Lemmen/Downloads/qt3hq916dc.pdf:pdf},
issn = {1884-5088},
journal = {Ensemble},
keywords = {Physics},
number = {4},
pages = {250--260},
title = {{ー校(U.C. Berkeley)}},
volume = {15},
year = {2013}
}
@article{Jones2020a,
abstract = {Best practice for environmental modelling generally aims to increase the accuracy, utility and rigour of models when used as decision-support tools. Despite the wide-spread documentation of best practice, models are frequently and easily challenged during environmental decision-making processes, at least partly because of poor implementation of best practice guidance. We postulate that there is a two-sided gap of understanding between those tasked with making environmental decisions informed by model simulations (i.e., the end users), and modellers charged with generating and interpreting model outputs for environmental decision-making processes. This gap, or disconnect, can mean that best practice is not always implemented in modelling projects. Here we describe a strategic framework that aims to facilitate the implementation of appropriate best practice guidelines to improve the defensibility of the modelling and provide a structured approach to improving communication between modellers and end users. The framework incorporates four phases: 1) initial scoping and investigation, 2) planning, 3) model implementation and evaluation, and 4) model application. At the end of each phase is a hold point that asks a critical question, such as whether modelling is the appropriate tool, or whether the model is adequate for the intended purpose. There is an emphasis on communication between end users and modellers in each phase, and feedback loops to allow for commentary from end users or peer reviewers to be addressed. The framework can be applied to any environmental domain but is sufficiently prescriptive to ensure that best practice guidance for specific domains and model applications can be identified and implemented.},
author = {Jones, Hannah F.E. and {\"{O}}zkundakci, Deniz and Hunt, Stephen and Giles, Hilke and Jenkins, Bevan},
doi = {10.1016/j.envsci.2020.09.030},
file = {:Users/Lemmen/Downloads/1-s2.0-S1462901120313496-main.pdf:pdf},
issn = {14629011},
journal = {Environmental Science {\&} Policy},
keywords = {Environmental decision-making,Environmental management,Model predictions,Peer review,Transparency,Uncertainty analysis},
month = {dec},
number = {October},
pages = {533--541},
title = {{Bridging the gap: A strategic framework for implementing best practice guidelines in environmental modelling}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S1462901120313496},
volume = {114},
year = {2020}
}
@book{Dalzell2009,
author = {Dalzell, Tom},
pages = {595},
title = {{The Routledge Dictionary of Modern American Slang and Unconventional English}},
year = {2009}
}
@article{Wang2023,
abstract = {Models of socio-environmental or social-ecological systems (SES) commonly address problems requiring interdisciplinary scientific expertise and input from a heterogeneous group of stakeholders. In SES modelling multiple interactions occur on different scales among various phenomena. These scale phenomena include the technical, such as system variables, process detail, inputs and outputs, which most often require spatial, temporal, thematic and organisational choices. From a good practice and project efficiency perspective, the problem scoping and conceptual model formulation phase of modelling is the one to address well from the outset. During this phase, intense and substantive discussions should arise regarding appropriate scales at which to represent the different phenomena. Although the details of these discussions influence the path of model development, they are seldom documented and as a result often forgotten. We draw upon personal experience with existing protocols and communications in recent literature to propose preliminary guidelines for documenting these early discussions about the scale(s) of the studied phenomena. Our guidelines aim to aid modelling group members in building and capturing the richness of their rationale for scoping and scale decisions. The resulting transcripts are intended to promote transparency of modelling decisions and provide essential support for the justification of the final model for its intended use. They also facilitate adaptive modifications of the pathway of model development via retracing decisions and iterative reflection upon alternative scale options.},
author = {Wang, Hsiao-Hsuan and {Van Voorn}, George and Grant, William E. and Zare, Fateme and Giupponi, Carlo and Steinmann, Patrick and M{\"{u}}ller, Birgit and Elsawah, Sondoss and {Van Delden}, Hedwig and Athanasiadis, Ioannis N. and Sun, Zhanli and Jager, Wander and Little, John C. and Jakeman, Anthony J.},
doi = {10.18174/sesmo.18563},
file = {:Users/Lemmen/Downloads/Wang{\_}2023{\_}Scale{\_}decisions.pdf:pdf},
issn = {2663-3027},
journal = {Socio-Environmental Systems Modelling},
month = {mar},
pages = {18563},
title = {{Scale decisions and good practices in socio-environmental systems modelling: guidance and documentation during problem scoping and model formulation}},
url = {https://sesmo.org/article/view/18563},
volume = {5},
year = {2023}
}
@article{Romanowska2015,
abstract = {With the current surge of simulation studies in archaeology, there is a growing concern for the lack of engagement and feedback between modelers and domain specialists. To facilitate this dialogue, I present a compact guide to the simulation modeling process applied to a common research topic and the focus of this special issue of Human Biology—human dispersals. The process of developing a simulation is divided into nine steps grouped in three phases. The conceptual phase consists of identifying research questions (step 1), finding the most suitable method (step 2), designing the general framework and the resolution of the simulation (step 3), and filling in that framework with the modeled entities and the rules of interactions (step 4). This is followed by the technical phase of coding and testing (step 5), parameterizing the simulation (step 6), and running it (step 7), and the results of the simulation are analyzed and recontextualized (step 8). In the dissemination phase, the findings of the model are disseminated in publications and code repositories (step 9). Each step is defined and characterized and then illustrated with examples of published human dispersal simulation studies. While not aiming to be a comprehensive textbook-style guide to simulation, this overview of the process of modeling human dispersals should arm any nonmodeler with enough understanding to evaluate the quality, strengths, and weaknesses of any particular archaeological simulation and provide a starting point for further exploration of this common scientific tool.},
author = {Romanowska, Iza},
doi = {10.13110/humanbiology.87.3.0169},
issn = {00187143},
journal = {Human Biology},
keywords = {Agent-based modeling,Archaeology,Human dispersal,Simulation},
number = {3},
pages = {169},
title = {{So You Think You Can Model? A Guide to Building and Evaluating Archaeological Simulation Models of Dispersals}},
url = {http://www.jstor.org/stable/10.13110/humanbiology.87.3.0169 https://muse.jhu.edu/article/611644},
volume = {87},
year = {2015}
}
@article{Ritchie1974,
abstract = {The unix* shell is a command programming language that provides an interface to the unix operating system. It contains several mechanisms found in algorithmic languages such as control‐flow primitives, variables, and parameter passing. Constructs such as while, if, for, and case are available. Two‐way communication is possible between the shell and commands. String‐valued parameters, typically file names or flags, may be passed to a command. A return code is set by commands and may be used to determine the flow of control, and the standard output from a command may be used as input to the shell. The shell can modify the environment in which commands run. Input and output can be redirected and processes that communicate through “pipes” can be invoked. Commands are found by searching directories in the file system in a sequence that can be defined by the user. {\textcopyright} 1978 The Bell System Technical Journal},
author = {Ritchie, Dennis M. and Thompson, Ken},
doi = {10.1002/j.1538-7305.1978.tb02139.x},
file = {:Users/Lemmen/Downloads/unix.pdf:pdf},
issn = {00058580},
journal = {Communications of the ACM},
keywords = {1974,30,32,4,and phrases,association for computing machinery,command language,copyright,cr categories,file system,operating,pdp -11,system,time-sharing},
month = {jul},
number = {7},
pages = {365--375},
title = {{UNIX Time-Sharing System: The UNIX Shell}},
url = {https://ieeexplore.ieee.org/document/6770407},
volume = {17},
year = {1974}
}
@article{Sabzian2018,
author = {Sabzian, Hossein and Shafia, Mohammad Ali and Naeini, Ali Bonyadi and Jandaghi, Gholamreza},
doi = {10.22059/IJMS.2018.261178.673190},
file = {:Users/Lemmen/Downloads/IJMS{\_}Volume 11{\_}Issue 4{\_}Pages 659-692.pdf:pdf},
number = {4},
pages = {659--692},
title = {{A Review of Agent-based Modeling (ABM) Concepts and.pdf}},
volume = {11},
year = {2018}
}
@article{Refsgaard2004,
abstract = {Some scientists argue, with reference to Popper's scientific philosophical school, that models cannot be verified or validated. Other scientists and many practitioners nevertheless use these terms, but with very different meanings. As a result of an increasing number of examples of model malpractice and mistrust to the credibility of models, several modelling guidelines are being elaborated in recent years with the aim of improving the quality of modelling studies. This gap between the views and the lack of consensus experienced in the scientific community and the strongly perceived need for commonly agreed modelling guidelines is constraining the optimal use and benefits of models. This paper proposes a framework for quality assurance guidelines, including a consistent terminology and a foundation for a methodology bridging the gap between scientific philosophy and pragmatic modelling. A distinction is made between the conceptual model, the model code and the site-specific model. A conceptual model is subject to confirmation or falsification like scientific theories. A model code may be verified within given ranges of applicability and ranges of accuracy, but it can never be universally verified. Similarly, a model may be validated, but only with reference to site-specific applications and to pre-specified performance (accuracy) criteria. Thus, a model's validity will always be limited in terms of space, time, boundary conditions and types of application. This implies a continuous interaction between manager and modeller in order to establish suitable accuracy criteria and predictions associated with uncertainty analysis. {\textcopyright} 2003 Elsevier Ltd. All rights reserved.},
author = {Refsgaard, Jens Christian and Henriksen, Hans J{\o}rgen},
doi = {10.1016/j.advwatres.2003.08.006},
file = {:Users/Lemmen/Downloads/1-s2.0-S0309170803001489-main.pdf:pdf},
issn = {03091708},
journal = {Advances in Water Resources},
keywords = {Confirmation,Domain of applicability,Model guidelines,Scientific philosophy,Uncertainty,Validation,Verification},
month = {jan},
number = {1},
pages = {71--82},
title = {{Modelling guidelines––terminology and guiding principles}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S0309170803001489},
volume = {27},
year = {2004}
}
@misc{Stroop1960,
author = {Stroop},
booktitle = {Chicago Daily Tribune},
month = {dec},
pages = {43},
title = {{U.S. Navy "Project KISS"}},
year = {1960}
}
@article{Jakeman2006,
abstract = {Models are increasingly being relied upon to inform and support natural resource management. They are incorporating an ever broader range of disciplines and now often confront people without strong quantitative or model-building backgrounds. These trends imply a need for wider awareness of what constitutes good model-development practice, including reporting of models to users and sceptical review of models by users. To this end the paper outlines ten basic steps of good, disciplined model practice. The aim is to develop purposeful, credible models from data and prior knowledge, in consort with end-users, with every stage open to critical review and revision. Best practice entails identifying clearly the clients and objectives of the modelling exercise; documenting the nature (quantity, quality, limitations) of the data used to construct and test the model; providing a strong rationale for the choice of model family and features (encompassing review of alternative approaches); justifying the techniques used to calibrate the model; serious analysis, testing and discussion of model performance; and making a resultant statement of model assumptions, utility, accuracy, limitations, and scope for improvement. In natural resource management applications, these steps will be a learning process, even a partnership, between model developers, clients and other interested parties. {\textcopyright} 2006 Elsevier Ltd. All rights reserved.},
author = {Jakeman, A.J. and Letcher, R.A. and Norton, J.P.},
doi = {10.1016/j.envsoft.2006.01.004},
file = {:Users/Lemmen/Downloads/1-s2.0-S1364815206000107-main.pdf:pdf},
issn = {13648152},
journal = {Environmental Modelling {\&} Software},
keywords = {Integrated assessment,Model testing,Sensitivity,System identification,Uncertainty,Verification},
month = {may},
number = {5},
pages = {602--614},
title = {{Ten iterative steps in development and evaluation of environmental models}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S1364815206000107},
volume = {21},
year = {2006}
}
@article{Wilson2016,
abstract = {Since its start in 1998, Software Carpentry has evolved from a week-long training course at the US national laboratories into a worldwide volunteer effort to improve researchers' computing skills. This paper explains what we have learned along the way, the challenges we now face, and our plans for the future.},
archivePrefix = {arXiv},
arxivId = {1307.5448},
author = {Wilson, Greg},
doi = {10.12688/f1000research.3-62.v2},
eprint = {1307.5448},
file = {:Users/Lemmen/Downloads/Software{\_}Carpentry{\_}Lessons{\_}learned.pdf:pdf},
issn = {2046-1402},
journal = {F1000Research},
keywords = {Education,Scientific Computing,Software Carpentry,Training},
month = {jan},
pages = {62},
title = {{Software Carpentry: lessons learned}},
url = {https://f1000research.com/articles/3-62/v2},
volume = {3},
year = {2016}
}
@article{Barnes2010,
author = {Barnes, Nick},
doi = {10.1038/467753a},
file = {:Users/Lemmen/Downloads/467753a.pdf:pdf},
issn = {0028-0836},
journal = {Nature},
month = {oct},
number = {7317},
pages = {753--753},
pmid = {20944687},
title = {{Publish your computer code: it is good enough}},
url = {https://www.nature.com/articles/467753a},
volume = {467},
year = {2010}
}
@article{Janssen2015,
abstract = {{\textcopyright} 2015, The Author(s). Here, we present a community perspective on how to explore, exploit and evolve the diversity in aquatic ecosystem models. These models play an important role in understanding the functioning of aquatic ecosystems, filling in observation gaps and developing effective strategies for water quality management. In this spirit, numerous models have been developed since the 1970s. We set off to explore model diversity by making an inventory among 42 aquatic ecosystem modellers, by categorizing the resulting set of models and by analysing them for diversity. We then focus on how to exploit model diversity by comparing and combining different aspects of existing models. Finally, we discuss how model diversity came about in the past and could evolve in the future. Throughout our study, we use analogies from biodiversity research to analyse and interpret model diversity. We recommend to make models publicly available through open-source policies, to standardize documentation and technical implementation of models, and to compare models through ensemble modelling and interdisciplinary approaches. We end with our perspective on how the field of aquatic ecosystem modelling might develop in the next 5–10 years. To strive for clarity and to improve readability for non-modellers, we include a glossary.},
annote = {From Duplicate 2 (Exploring, exploiting and evolving diversity of aquatic ecosystem models: a community perspective - Janssen, Annette B.G.; Arhonditsis, George B.; Beusen, Arthur; Bolding, Karsten; Bruce, Louise; Bruggeman, Jorn; Couture, Raoul-Marie; Downing, Andrea S.; Alex Elliott, J.; Frassl, Marieke A.; Gal, Gideon; Gerla, Daan J.; Hipsey, Matthew R.; Hu, Fenjuan; Ives, Stephen C.; Janse, Jan H.; Jeppesen, Erik; J{\"{o}}hnk, Klaus D.; Kneis, David; Kong, Xiangzhen; Kuiper, Jan J.; Lehmann, Moritz K.; Lemmen, Carsten; {\"{O}}zkundakci, Deniz; Petzoldt, Thomas; Rinke, Karsten; Robson, Barbara J.; Sachse, Ren{\'{e}}; Schep, Sebastiaan A.; Schmid, Martin; Scholten, Huub; Teurlincx, Sven; Trolle, Dennis; Troost, Tineke A.; Van Dam, Anne A.; Van Gerven, Luuk P. A.; Weijerman, Mariska; Wells, Scott A.; Mooij, Wolf M.)
And Duplicate 3 (Exploring, exploiting and evolving diversity of aquatic ecosystem models: a community perspective - Janssen, Annette B.G.; Arhonditsis, George B.; Beusen, Arthur; Bolding, Karsten; Bruce, Louise; Bruggeman, Jorn; Couture, Raoul-Marie; Downing, Andrea S.; Alex Elliott, J.; Frassl, Marieke A.; Gal, Gideon; Gerla, Daan J.; Hipsey, Matthew R.; Hu, Fenjuan; Ives, Stephen C.; Janse, Jan H.; Jeppesen, Erik; J{\"{o}}hnk, Klaus D.; Kneis, David; Kong, Xiangzhen; Kuiper, Jan J.; Lehmann, Moritz K.; Lemmen, Carsten; {\"{O}}zkundakci, Deniz; Petzoldt, Thomas; Rinke, Karsten; Robson, Barbara J.; Sachse, Ren{\'{e}}; Schep, Sebastiaan A.; Schmid, Martin; Scholten, Huub; Teurlincx, Sven; Trolle, Dennis; Troost, Tineke A.; Van Dam, Anne A.; Van Gerven, Luuk P. A.; Weijerman, Mariska; Wells, Scott A.; Mooij, Wolf M.)

NULL},
author = {Janssen, Annette B. G. and Arhonditsis, George B. and Beusen, Arthur and Bolding, Karsten and Bruce, Louise and Bruggeman, Jorn and Couture, Raoul-Marie and Downing, Andrea S. and {Alex Elliott}, J. and Frassl, Marieke A. and Gal, Gideon and Gerla, Daan J. and Hipsey, Matthew R. and Hu, Fenjuan and Ives, Stephen C. and Janse, Jan H. and Jeppesen, Erik and J{\"{o}}hnk, Klaus D. and Kneis, David and Kong, Xiangzhen and Kuiper, Jan J.J. and Lehmann, Moritz K. and Lemmen, Carsten and {\"{O}}zkundakci, Deniz and Petzoldt, Thomas and Rinke, Karsten and Robson, Barbara J. and Sachse, Ren{\'{e}} and Schep, Sebastiaan A. and Schmid, Martin and Scholten, Huub and Teurlincx, Sven and Trolle, Dennis and Troost, Tineke A. and {Van Dam}, Anne A. and {Van Gerven}, Luuk P. A. and Weijerman, Mariska and Wells, Scott A. and Mooij, Wolf M.},
doi = {10.1007/s10452-015-9544-1},
file = {:Users/Lemmen/Downloads//Janssen et al.{\_}2015{\_}Aquatic Ecology{\_}Exploring, exploiting and evolving diversity of aquatic ecosystem models a community perspective.pdf:pdf},
issn = {1386-2588},
journal = {Aquatic Ecology},
keywords = {Ecology,Geochemistry,Hydraulics,Hydrodynamics,Hydrology,Linking,Model availability,Physical environment,Socio-economics,Standardization,Water quality,a community,corresponding author,exploiting and evolving diversity,exploring,of aquatic ecosystem models},
month = {dec},
number = {4},
pages = {513--548},
title = {{Exploring, exploiting and evolving diversity of aquatic ecosystem models: a community perspective}},
url = {http://link.springer.com/10.1007/s10452-015-9544-1},
volume = {49},
year = {2015}
}
@article{Schneider2022,
abstract = {Online platforms train users to interact with each other through certain widespread interface designs. This article argues that an “implicit feudalism” informs the available options for community management on the dominant platforms for online communities. It is a pattern that grants user-administrators absolutist reign over their fiefdoms, with competition among them as the primary mechanism for quality control, typically under rules set by platform companies. Implicit feudalism emerged from technical conditions dating to early online networks. In light of alternative management mechanisms with more democratic features, it becomes all the more clear that implicit feudalism is not a necessary condition.},
author = {Schneider, Nathan},
doi = {10.1177/1461444820986553},
file = {:Users/Lemmen/Downloads/schneider-2021-admins-mods-and-benevolent-dictators-for-life-the-implicit-feudalism-of-online-communities.pdf:pdf},
issn = {1461-4448},
journal = {New Media {\&} Society},
keywords = {Media archeology,online communities,online governance,social media,software studies},
month = {sep},
number = {9},
pages = {1965--1985},
title = {{Admins, mods, and benevolent dictators for life: The implicit feudalism of online communities}},
url = {http://journals.sagepub.com/doi/10.1177/1461444820986553},
volume = {24},
year = {2022}
}
@article{Thiele2015,
abstract = {There are two major limitations to the potential of computational models in ecology for producing general insights: their design is path‐dependent, reflecting different underlying questions, assumptions, and data, and there is too little robustness analysis exploring where the model mechanisms explaining certain observations break down. We here argue that both limitations could be overcome if modellers in ecology would more often replicate existing models, try to break the models, and explore modifications. Replication comprises the re‐implementation of an existing model and the replication of its results. Breaking models means to identify under what conditions the mechanisms represented in a model can no longer explain observed phenomena. The benefits of replication include less effort being spent to enter the iterative stage of model development and having more time for systematic robustness analysis. A culture of replication would lead to increased credibility, coherence and efficiency of computational modelling and thereby facilitate theory development.},
author = {Thiele, Jan C. and Grimm, Volker},
doi = {10.1111/oik.02170},
file = {:Users/Lemmen/Downloads/Oikos - 2015 - Thiele - Replicating and breaking models  good for you and good for ecology.pdf:pdf},
issn = {0030-1299},
journal = {Oikos},
month = {jun},
number = {6},
pages = {691--696},
title = {{Replicating and breaking models: good for you and good for ecology}},
url = {https://onlinelibrary.wiley.com/doi/10.1111/oik.02170},
volume = {124},
year = {2015}
}
@article{Gurbani2010,
abstract = {Introduction},
author = {Gurbani, Vijay K. and Garvert, Anita and Herbsleb, James D.},
doi = {10.1145/1646353.1646392},
file = {:Users/Lemmen/Downloads/1646353.1646392.pdf:pdf},
issn = {0001-0782},
journal = {Communications of the ACM},
month = {feb},
number = {2},
pages = {155--159},
title = {{Managing a corporate open source software asset}},
url = {https://dl.acm.org/doi/10.1145/1646353.1646392},
volume = {53},
year = {2010}
}
@phdthesis{Suenson2015,
author = {Suenson, Espen},
file = {:Users/Lemmen/Downloads/suenson{\_}espen.pdf:pdf},
isbn = {9789521232268},
number = {197},
pages = {301},
title = {{How Computer Programmers Work}},
year = {2015}
}
@article{Flesch1950,
abstract = {As programmers, we've all seen source code that's so ugly and buggy it makes our brain ache. Over the past five years, authors Dustin Boswell and Trevor Foucher have analyzed hundreds of examples of "bad code" (much of it their own) to determine why they're bad and how they could be improved. Their conclusion? You need to write code that minimizes the time it would take someone else to understand it—even if that someone else is you. This book focuses on basic principles and practical techniques you can apply every time you write code. Using easy-to-digest code examples from different languages, each chapter dives into a different aspect of coding, and demonstrates how you can make your code easy to understand. Simplify naming, commenting, and formatting with tips that apply to every line of code Refine your program's loops, logic, and variables to reduce complexity and confusion Attack problems at the function level, such as reorganizing blocks of code to do one task at a time Write effective test code that is thorough and concise—as well as readable "Being aware of how the code you create affects those who look at it later is an important part of developing software. The authors did a great job in taking you through the different aspects of this challenge, explaining the details with instructive examples." —Michael Hunger, passionate Software Developer},
author = {Flesch, Rudolf},
doi = {10.2307/1225957},
file = {:Users/Lemmen/Downloads/styleboswell.pdf:pdf},
issn = {00389765},
journal = {Stanford Law Review},
month = {apr},
number = {3},
pages = {625},
title = {{The Art of Readable Writing}},
url = {https://www.jstor.org/stable/1225957?origin=crossref},
volume = {2},
year = {1950}
}
@inproceedings{Gurbani2006,
abstract = {Open source practices and tools have proven to be highly effective for overcoming the many problems of geographically distributed software development. We know relatively little, however, about the range of settings in which they work. In particular, can corporations use the open source development model effectively for software projects inside the corporate domain? Or are these tools and practices incompatible with development environments, management practices, and market-driven schedule and feature decisions typical of a commercial software house? We present a case study of open source software development methodology adopted by a significant commercial software project in the telecommunications domain. We extract a number of lessons learned from the experience, and identify open research questions. Copyright 2006 ACM.},
address = {New York, NY, USA},
author = {Gurbani, Vijay K. and Garvert, Anita and Herbsleb, James D.},
booktitle = {Proceedings of the 28th international conference on Software engineering},
doi = {10.1145/1134285.1134352},
file = {:Users/Lemmen/Downloads/A{\_}case{\_}study{\_}of{\_}a{\_}corporate{\_}open{\_}source.pdf:pdf},
isbn = {1595933751},
issn = {02705257},
keywords = {Architecture,Open source,Session initiation protocol,Software development},
month = {may},
pages = {472--481},
publisher = {ACM},
title = {{A case study of a corporate open source development model}},
url = {https://dl.acm.org/doi/10.1145/1134285.1134352},
volume = {2006},
year = {2006}
}
@article{Crout2013,
author = {Crout, N},
file = {:Users/Lemmen/Downloads/Good Modelling Practice.pdf:pdf},
pages = {2013},
title = {{DigitalCommons @ University of Nebraska -}},
year = {2013}
}
@article{Kernighan1976,
abstract = {Building on the work of others is the only way to make substantial progress in any field. Yet computer programming continues as a cottage industry because programmers insist on reinventing programs for each new application, instead of using what already exists. We must encourage a way of packaging programs so that they can be perceived as standard tools, each performing its specialized task sufficiently well and interfacing to other tools so conveniently that programmers seldom feel any need to make their own version from scratch.In this paper we show how programmers can view substantial parts of what they do as tool building and tool using. By studying some specific examples of general purpose tools, we show how programs can be packaged as tools, so other programmers will use them in preference to building their own. We also comment on the sort of programming environment which seems most hospitable to the development and use of tools.},
author = {Kernighan, B. W. and Plauger, P. J.},
doi = {10.1145/1010726.1010728},
file = {:Users/Lemmen/Downloads/1010726.1010728.pdf:pdf},
issn = {0163-5948},
journal = {ACM SIGSOFT Software Engineering Notes},
month = {may},
number = {1},
pages = {15--20},
pmid = {6897844},
title = {{Software tools}},
url = {https://dl.acm.org/doi/10.1145/1010726.1010728},
volume = {1},
year = {1976}
}
@book{Stachowiak1973,
address = {Berlin},
author = {Stachowiak, Herbert},
keywords = {1973,425c,model-theory,model-theory-group},
publisher = {Springer},
title = {{Allgemeine Modelltheorie}},
url = {http://www.citeulike.org/group/13305/article/7013052},
year = {1973}
}
@article{DeNoni2014,
abstract = {In this paper, we investigate the nature of the relationships between dimensions of governance in Open Source (OS) communities. A recent review highlighted this issue as critical. Furthermore, this issue has been recognized as strategic for managing the trade-off between innovation and standardization, the capacity of firms to profit from their investment in open source, and the sustainability of OS projects. Our results are based on a comparative analysis of 40 OS projects contained in the Freshmeat dataset. For each project, we collected data on the governance solutions implemented. Governance mechanisms have been ranked for their degree of openness. Our findings show that OS governance is configurational. Those configurations are defined along two dimensions: leadership and decision-making distribution, and reciprocity of the appropriability regime. Four configurations are indeed defined: open source, sponsored, reciprocity-based, and tolerant dictatorship. Those configurations have been defined based on an exploratory factor analysis.},
author = {{De Noni}, Ivan and Ganzaroli, Andrea and Orsi, Luigi},
doi = {10.15209/jbsge.v6i1.195},
file = {:Users/Lemmen/Downloads/195-Article Text-495-2-10-20220428.pdf:pdf},
issn = {1833-4318},
journal = {Journal of Business Systems, Governance and Ethics},
keywords = {community management,design of participation architecture,open source software,oss governance},
month = {apr},
number = {1},
pages = {1--18},
title = {{The Governance of Open Source Software Communities: An Exploratory Analysis}},
url = {https://jbsge.vu.edu.au/index.php/jbsge/article/view/195},
volume = {6},
year = {2011}
}
